@model IOCL_Training_Module.Models.DashboardViewModel
@{
    ViewData["Title"] = "Employee Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .content {
            margin-left: 150px;
            transition: 0.3s;
        }

        .table th, .table td {
            text-align: center;
        }

        .chart-container {
            width: 100%;
            height: 300px;
            margin: auto;
            position: relative;
        }

        #percentageContainer {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 22px;
            font-weight: bold;
            color: black;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        .box {
            background: #fff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
            border-left: 5px solid #5A8E3E;
        }
    </style>
</head>
<body>
    <div class="container content">
        <h2>Employee Dashboard</h2>
        <form method="get">
            <label for="selectedEmpNo">Select Employee:</label>
            <select id="selectedEmpNo" name="selectedEmpNo" class="form-control" required onchange="this.form.submit()">
                <option value="">-- Select Employee --</option>
                @if (Model?.LoggedInEmployee != null)
                {
                    <option value="@Model.LoggedInEmployee.EmpNo" selected="@(Model.Employee?.EmpNo == Model.LoggedInEmployee.EmpNo ? "selected" : null)">@Model.LoggedInEmployee.EmpNo - @Model.LoggedInEmployee.Name (You)</option>
                }
                @if (Model?.ReportingEmployees != null && Model.ReportingEmployees.Any())
                {
                    foreach (var emp in Model.ReportingEmployees)
                    {
                        <option value="@emp?.EmpNo" selected="@(Model.Employee?.EmpNo == emp?.EmpNo ? "selected" : null)">@emp?.EmpNo - @emp?.Name</option>
                    }
                }
            </select>
        </form>

        <div class="dashboard-grid">
            <!-- Employee Details Box -->
            <div class="box">
                <h3>Employee Details</h3>
                <table class="table table-bordered">
                    @if (Model?.Employee != null)
                    {
                        <tr><th>Employee No</th><td>@Model.Employee.EmpNo</td></tr>
                        <tr><th>Name</th><td>@Model.Employee.Name</td></tr>
                        <tr><th>Department</th><td>@Model.Employee.EmpDepartment</td></tr>
                        <tr><th>Designation</th><td>@Model.Employee.EmpDesignation</td></tr>
                    }
                </table>
            </div>

            <!-- Doughnut Chart Box -->
            <div class="box">
                <h3>Training Completion Rate</h3>
                <div class="chart-container">
                    <canvas id="gaugeChart"></canvas>
                    <div id="gaugePercentage"></div>
                </div>
            </div>
        </div>

        <div class="dashboard-grid">
            <!-- Horizontal Bar Chart Box -->
            <div class="box">
                <h3>Training Statistics</h3>
                <div class="chart-container">
                    <canvas id="trainingChart"></canvas>
                </div>
            </div>

            <!-- Empty Box for spacing (if needed) -->
            <div class="box">
                <!-- This can be used for any additional content if needed -->
            </div>
        </div>
    </div>

    @{
        var completedTrainings = Model?.CompletedTrainings?.Count() ?? 0;
        var notCompletedTrainings = Model?.NotCompletedTrainings?.Count() ?? 0;
        var totalTrainings = completedTrainings + notCompletedTrainings;
        var completedPercentage = totalTrainings > 0 ? (completedTrainings * 100) / totalTrainings : 0;
    }
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            console.log("Page Loaded - Initializing Charts");

            // Training Completion Gauge Chart
            var ctx = document.getElementById('gaugeChart')?.getContext('2d');
            if (ctx) {
                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Completed', 'Remaining'],
                        datasets: [{
                            data: [@completedPercentage, 100 - @completedPercentage],
                            backgroundColor: ['#5A8E3E', '#ccc'],
                            hoverBackgroundColor: ['#4e7034', '#b4b4b4'],
                        }]
                    },
                    options: {
                        responsive: true,
                        cutoutPercentage: 80,
                        plugins: {
                            tooltip: {
                                enabled: false
                            },
                            legend: {
                                position: 'top',
                                display: false
                            }
                        }
                    }
                });
            }

            // Training Statistics Bar Chart
            const trainingChartElement = document.getElementById('trainingChart');
            if (!trainingChartElement) {
                console.error("Canvas 'trainingChart' not found.");
                return;
            }

            fetch("https://localhost:7161/Training/TrainingStatistics")
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Received Training Statistics Data: ", data);

                    let general = Number(data.generalAwareness) || 0;
                    let functional = Number(data.functional) || 0;
                    let developmental = Number(data.developmental) || 0;

                    const ctxBar = trainingChartElement.getContext('2d');
                    new Chart(ctxBar, {
                        type: 'bar',
                        data: {
                            labels: ['General Awareness', 'Functional', 'Developmental'],
                            datasets: [{
                                label: 'Number of Trainings',
                                data: [general, functional, developmental],
                                backgroundColor: ['#4CAF50', '#FF9800', '#2196F3'],
                                borderWidth: 1,
                                barThickness: 30,
                                maxBarThickness: 30
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error("Error fetching training statistics:", error);
                    alert("Failed to load training statistics. Check console for details.");
                });
        });
    </script>
</body>
</html>
